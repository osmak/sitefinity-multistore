@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;

@*Add scripts and stylesheets*@
@Html.Script(Url.WidgetContent("~/ResourcePackages/SemanticUI/javascript/semantic.min.js"))
@Html.Script(Url.WidgetContent("Mvc/Scripts/Navigation.js"))

<div class="@Model.CssClass">
    @Html.Action("GetView", new { viewName = "Dropdown", model= Model})

    <nav class="ui menu purple inverted">
        @foreach (var node in Model.Nodes)
        {
            @RenderRootLevelNode(node);
        }
    </nav>
</div>

@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(NodeViewModel node)
{
    if (node.ChildNodes.Count > 0)
    {
        <div class="ui dropdown item" tabindex="0">
            <a href="@node.Url" target="@node.LinkTarget">@node.Title</a>
            <i class="dropdown icon"></i>
            <div class="menu">
                @RenderSubLevelsRecursive(node)
            </div>
        </div>
    }
    else
    {
        <a class="item @GetClass(node)" href="@node.Url" target="@node.LinkTarget">@node.Title</a>
    }
}

@*Here is specified the rendering for all child levels*@
@helper RenderSubLevelsRecursive(NodeViewModel node)
{
    foreach (var childNode in node.ChildNodes)
    {
        if(childNode.ChildNodes.Count > 0)
        {
            <div class="ui dropdown item" tabindex="0">
                <a href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
                <i class="dropdown icon"></i>
                <div class="menu">
                    @RenderSubLevelsRecursive(childNode)
                </div>
            </div>
        }
        else
        {
            <a class="item" href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>

        }
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{

    if (node.IsCurrentlyOpened)
    {
        @Html.Raw("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.Raw("active");
    }
}

<script>
$(".menu .dropdown").dropdown();
</script>